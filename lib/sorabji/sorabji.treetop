grammar Sorabji

  rule statement
    expression* <Sorabji::StatementNode>
  end

  rule expression
    ( list / operation / value_entity )
  end

  rule entity
    # basically, anything at all.
    ( operation / value_entity / identifier / operator / space )
  end

  rule value_entity
    # Any entity that can be reduced to a primitive value without ambiguous precedence.
    # `brackets` can enclose an operation to make it act as a value entity.
    ( brackets / reference_object_identifier / object_identifier / integer / function / string / boolean )
  end
  
  rule operation
    left:value_entity operator:(operator / comparator) right:expression <Sorabji::OperationNode>
  end

  rule reference_object_identifier
    '{' ident:object_identifier '}' <Sorabji::ReferenceObjectIdentifierNode>
  end

  rule object_identifier
    '{' ident:( identifier / integer ) '}' <Sorabji::ObjectIdentifierNode>
  end

  rule brackets
    '(' content:( entity / operation ) ')' <Sorabji::BracketedNode>
  end

  rule function
    ( f_default / f_ternary / f_mean / f_included )
  end

  rule f_default
    "default" args:list <Sorabji::FunctionDefaultNode>
  end

  rule f_ternary
    "if" args:list <Sorabji::FunctionTernaryNode>
  end

  rule f_mean
    "mean" args:list <Sorabji::FunctionMeanNode>
  end

  rule f_included
    "included?" args:list <Sorabji::FunctionIncludedNode>
  end

  rule list
    '[' values:ary_expression* ']' <Sorabji::ListNode>
  end

  rule ary_expression
    space* expression
  end

  rule integer
    [0-9]+ <Sorabji::IntegerLiteralNode>
  end

  rule string
    ( dq_string )
  end

  rule dq_string
    '"' content:(('\"' / !'"' .)*) '"' <Sorabji::StringLiteralNode>
  end

  rule boolean
    (bool_true / bool_false)
  end

  rule bool_true
    "true" <Sorabji::BooleanTrueNode>
  end

  rule bool_false
    "false" <Sorabji::BooleanFalseNode>
  end

  rule identifier
    [a-z_]+ <Sorabji::IdentifierNode>
  end

  rule comparator
    (greater_than_or_equal_to_comp / less_than_or_equal_to_comp / greater_than_comp / less_than_comp / equal_to_comp)
  end

  rule greater_than_or_equal_to_comp
    '>='
  end

  rule less_than_or_equal_to_comp
    '<='
  end

  rule greater_than_comp
    '>'
  end

  rule less_than_comp
    '<'
  end

  rule equal_to_comp
    '=='
  end

  rule operator
    space* (addition_op / subtraction_op / multiplication_op / division_op / comparator) space* <Sorabji::OperatorNode>
  end

  rule addition_op
    "+"
  end

  rule subtraction_op
    "-"
  end

  rule multiplication_op
    "*"
  end

  rule division_op
    "/"
  end

  rule space
    [\s]+
  end

end
